name: CI/CD LogistiQ 🧪🚀

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ========================
  # 🔹 TESTES BACKEND (pytest)
  # ========================
  test:
    name: 🧠 Testes Unitários (Pytest)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 📦 Instalar dependências Python
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: 🧪 Executar testes com cobertura
        run: |
          source venv/bin/activate
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing

      - name: 📤 Upload do relatório de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage

  # ========================
  # 🔹 TESTES E2E (Cypress)
  # ========================
  e2e:
    name: 🌐 Testes E2E (Cypress)
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout do repositório
        uses: actions/checkout@v4

      - name: 🧰 Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 📦 Instalar dependências Python
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Instalar dependências do Cypress
        run: npm ci

      - name: 🚀 Iniciar servidor Flask
        env:
          FLASK_APP: run.py
          FLASK_ENV: testing
        run: |
          python -m venv venv
          nohup flask run --host=0.0.0.0 --port=5000 &
          echo "⏳ Aguardando o servidor iniciar..."
          sleep 10
          curl -I http://127.0.0.1:5000 || echo "⚠️ Servidor não respondeu"

      - name: 🧩 Criar usuário administrador de teste
        run: |
          source venv/bin/activate
          python - <<'PYCODE'
          from app import create_app, db
          from app.models import Usuario
          from werkzeug.security import generate_password_hash

          app = create_app()
          with app.app_context():
              db.create_all()
              user = Usuario.query.filter_by(email="teste@example.com").first()
              if not user:
                  admin = Usuario(
                      nome="Teste Cypress",
                      email="teste@example.com",
                      senha=generate_password_hash("senha_teste"),
                      role="administrador",
                      ativo=True
                  )
                  db.session.add(admin)
                  db.session.commit()
                  print("✅ Usuário administrador criado: teste@example.com / senha_teste")
              else:
                  print("ℹ️ Usuário de teste já existe.")
          PYCODE

      - name: 🧪 Executar testes Cypress
        env:
          CYPRESS_BASE_URL: http://localhost:5000
        run: npx cypress run --browser chrome

      - name: 📊 Gerar relatório Cypress (Mochawesome)
        if: always()
        run: |
          mkdir -p cypress/reports/html
          npx mochawesome-merge cypress/reports/*.json > cypress/reports/report.json
          npx marge cypress/reports/report.json -f report -o cypress/reports/html
          cp cypress/reports/report.json cypress/reports/html/
          cp cypress/reports/dashboard.html cypress/reports/html/ || true

      - name: 📤 Upload do relatório Cypress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-report
          path: cypress/reports/html

  # ========================
  # 🔹 PUBLICAÇÃO DO DASHBOARD + DOCS
  # ========================
  publish-report:
    name: 📊 Publicar Relatório QA + Documentação
    runs-on: ubuntu-latest
    needs: e2e
    if: always()  # publica mesmo se houver falhas

    steps:
      - name: 📥 Checkout repositório
        uses: actions/checkout@v4

      - name: 📥 Baixar artefato de relatório
        uses: actions/download-artifact@v4
        with:
          name: cypress-report
          path: cypress/reports/html

      # 🧾 Histórico de execuções
      - name: 🧾 Atualizar histórico de execuções
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          mkdir -p cypress/reports/html/history
          HIST_FILE="cypress/reports/html/history/history.json"

          if [ ! -f "$HIST_FILE" ]; then
            echo "[]" > "$HIST_FILE"
          fi

          PASSES=$(jq '.stats.passes' cypress/reports/report.json)
          FAILS=$(jq '.stats.failures' cypress/reports/report.json)
          TOTAL=$(jq '.stats.tests' cypress/reports/report.json)
          DURATION=$(jq '.stats.duration' cypress/reports/report.json)
          DATE=$(date +"%Y-%m-%d %H:%M:%S")

          jq ". += [{date:\"$DATE\", passes:$PASSES, fails:$FAILS, total:$TOTAL, duration:$DURATION}]" "$HIST_FILE" > tmp.$$.json && mv tmp.$$.json "$HIST_FILE"
          jq '.[-5:]' "$HIST_FILE" > tmp.$$.json && mv tmp.$$.json "$HIST_FILE"

      # 📘 Documentação Técnica
      - name: 📝 Gerar documentação técnica (Markdown)
        run: |
          mkdir -p docs
          REPORT="docs/test-report.md"
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          COMMIT=$(git rev-parse --short HEAD)
          AUTHOR=$(git log -1 --pretty=format:'%an')
          BRANCH=${GITHUB_REF##*/}
          PASSES=$(jq '.stats.passes' cypress/reports/report.json)
          FAILS=$(jq '.stats.failures' cypress/reports/report.json)
          TOTAL=$(jq '.stats.tests' cypress/reports/report.json)
          DURATION=$(jq '.stats.duration' cypress/reports/report.json)

          echo "# 📘 LogistiQ - Relatório Técnico de Testes Automatizados" > $REPORT
          echo "" >> $REPORT
          echo "**Última execução:** $DATE" >> $REPORT
          echo "**Branch:** \`$BRANCH\`" >> $REPORT
          echo "**Commit:** \`$COMMIT\`" >> $REPORT
          echo "**Autor:** $AUTHOR" >> $REPORT
          echo "" >> $REPORT
          echo "---" >> $REPORT
          echo "" >> $REPORT
          echo "## 🌐 Testes E2E (Cypress)" >> $REPORT
          echo "- Total de testes: $TOTAL" >> $REPORT
          echo "- Sucessos: $PASSES ✅" >> $REPORT
          echo "- Falhas: $FAILS ❌" >> $REPORT
          echo "- Duração: $((DURATION / 1000))s" >> $REPORT
          echo "- Histórico visual: [📊 Dashboard QA](https://nicolasgayb.github.io/LogistiQ)" >> $REPORT
          echo "" >> $REPORT
          echo "---" >> $REPORT
          echo "_Gerado automaticamente pelo pipeline CI/CD do LogistiQ._" >> $REPORT

      # 🧾 Commit automático da documentação no repositório
      - name: 📦 Commit & Push da Documentação
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/test-report.md
          git commit -m "📘 Atualização automática da documentação técnica de testes"
          git push origin main || true

      # 🌐 Publicar Dashboard QA no GitHub Pages
      - name: 🌐 Publicar no GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: cypress/reports/html
          commit_message: "📊 Atualização automática do relatório Cypress + histórico + documentação"

  # ========================
  # 🔹 DEPLOY NO SERVIDOR
  # ========================
  deploy:
    name: 🚀 Deploy Produção (Servidor LogistiQ)
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: ⚙️ Instalar dependências
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📡 Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          script: |
            PROJECT_DIR="/home/logistiq/LogistiQ"
            VENV_DIR="$PROJECT_DIR/venv"

            echo "🔹 Ajustando permissões..."
            sudo chown -R $USER:$USER $PROJECT_DIR || true

            echo "🔹 Atualizando repositório..."
            cd $PROJECT_DIR
            git config --global --add safe.directory $PROJECT_DIR
            git fetch --all
            git reset --hard origin/main

            echo "🔹 Recriando ambiente virtual..."
            if [ ! -d "$VENV_DIR" ]; then
              python3 -m venv $VENV_DIR
            fi
            source $VENV_DIR/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "🔹 Reiniciando serviços..."
            sudo systemctl reload logistiq || sudo systemctl restart logistiq
            sudo systemctl restart nginx

            echo "✅ Deploy concluído com sucesso!"
            echo "🔗 Acesse: https://logistiq.studio"