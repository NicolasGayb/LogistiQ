name: CI/CD Deploy Logistiq

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=term-missing

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage

  e2e:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout repositório
        uses: actions/checkout@v4

      - name: 🧰 Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Instalar dependências Node
        run: npm ci

      - name: 🚀 Iniciar servidor Flask
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          nohup python run.py &
          sleep 10

      - name: 🧪 Executar testes Cypress
        run: npx cypress run --browser chrome

      - name: 📊 Gerar relatório Cypress (Mochawesome)
        if: always()
        run: |
          npx mochawesome-merge cypress/reports/*.json > cypress/reports/report.json
          npx marge cypress/reports/report.json -f report -o cypress/reports/html

      - name: 📤 Upload do relatório Cypress (artefato)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-report
          path: cypress/reports/html

  publish-report:
    runs-on: ubuntu-latest
    needs: e2e
    if: always() # publica mesmo se houver falha nos testes

    steps:
      - name: 📥 Checkout repositório
        uses: actions/checkout@v4

      - name: 📦 Baixar relatório gerado
        uses: actions/download-artifact@v4
        with:
          name: cypress-report
          path: cypress/reports/html

      - name: 🌐 Publicar relatório no GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: cypress/reports/html
          commit_message: "📊 Atualização automática do relatório Cypress"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies (for validation)
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          script: |
            PROJECT_DIR="/home/logistiq/LogistiQ"
            VENV_DIR="$PROJECT_DIR/venv"

            echo "🔹 Ajustando permissões..."
            sudo chown -R $USER:$USER $PROJECT_DIR || true

            echo "🔹 Atualizando repositório Git..."
            cd $PROJECT_DIR
            echo "🧹 Limpando diretório antigo..."
            sudo rm -rf $PROJECT_DIR/*
            git config --global --add safe.directory $PROJECT_DIR
            git reset --hard
            git pull origin main

            echo "🔹 Criando virtualenv se não existir..."
            if [ ! -d "$VENV_DIR" ]; then
              python3 -m venv $VENV_DIR
            fi

            echo "🔹 Ativando virtualenv e instalando dependências..."
            source $VENV_DIR/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            echo "🔹 Reiniciando serviços..."
            sudo systemctl reload logistiq || sudo systemctl restart logistiq
            sudo systemctl restart nginx

            echo "✅ Deploy concluído com sucesso!"
            echo "🔗 Acesse em: https://logistiq.studio"
